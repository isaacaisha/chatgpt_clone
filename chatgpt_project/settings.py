"""
Django settings for chatgpt_project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from decouple import config
from pathlib import Path
from django.utils.translation import gettext_lazy as _


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#bf*vlv%$(l74v8l3gcb2%jx=dudjsl1t@ux^65t9)-xx#ukdf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = True

ALLOWED_HOSTS = ['*']

PROXY = {
    'http': 'http://127.0.0.1:8080',
    'https': 'http://127.0.0.1:8080',
}

# Set secure headers (Optional but recommended for production)
CSRF_TRUSTED_ORIGINS = [
    'https://chatgpt-clone.copromanager.pro/',
    'https://www.chatgpt-clone.copromanager.pro/'
]

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

SESSION_COOKIE_SECURE = not config('DEBUG', default=True, cast=bool)
CSRF_COOKIE_SECURE = not config('DEBUG', default=True, cast=bool)
SECURE_SSL_REDIRECT = not config('DEBUG', default=True, cast=bool)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 900  # 15 minutes

# Other CORS settings you might use
CORS_ALLOW_CREDENTIALS = True  # Allow cookies and HTTP authentication

# Login URL for authentication redirects
#LOGIN_URL = '/'
LOGIN_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = 'vip_user'  # Redirect to your desired page after login

# this one is optional
#LOGIN_REDIRECT_URL = 'two_factor:profile'

# Optional: Customize 2FA settings
TWO_FACTOR_PATCH_ADMIN = True  # Apply 2FA to Django admin
TWO_FACTOR_LOGIN_TEMPLATE = 'two_factor/login_register.html'
TWO_FACTOR_QR_FACTORY = 'qrcode.image.pil.PilImage'  # Generates QR codes for authenticator apps

# Optional: Control when users should be redirected to setup
TWO_FACTOR_AUTO_SETUP = False  # If False, users must manually complete the setup

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'chatgpt_app',
    'django_recaptcha',

    # 2AF Authentication
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_email',  # <- if you want email capability.
    'two_factor',
    'two_factor.plugins.phonenumber',  # <- if you want phone number capability.
    'two_factor.plugins.email',  # <- if you want email capability.
    #'two_factor.plugins.yubikey',  # <- for yubikey capability.
]

AUTH_USER_MODEL = 'chatgpt_app.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #that detects the user's preferred language from their browser settings or session and applies it
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'csp.middleware.CSPMiddleware',
    
    # 2AF Authentication
    'django_otp.middleware.OTPMiddleware',
]

# reCAPTCHA settings for v2 and v3
RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_PRIVATE_KEY')

RECAPTCHA_REQUIRED_SCORE = 0.85  # For reCAPTCHA v3

# Content Security Policy settings
CSP_DEFAULT_SRC = ("'self'",)  # Allow resources from the same origin by default
CSP_SCRIPT_SRC = ("'self'", 'https://trusted.cdn.com', 'https://code.jquery.com')  # Allow scripts from self and CDN
CSP_STYLE_SRC = ("'self'", 'https://cdn.jsdelivr.net', 'https://fonts.googleapis.com')  # Allow styles from self and CDN
CSP_IMG_SRC = ("'self'", 'data:', 'https://trusted.cdn.com')  # Allow images from self, data URIs, and trusted CDN
CSP_FONT_SRC = ("'self'", 'https://fonts.gstatic.com')  # Allow fonts from self and Google Fonts
CSP_CONNECT_SRC = ("'self'",)  # Allow XMLHttpRequest, WebSocket, etc. only from the same origin
CSP_FRAME_SRC = ("'none'",)  # Disallow embedding the page in frames
CSP_BASE_URI = ("'self'",)  # Allow base URIs only from self
CSP_FORM_ACTION = ("'self'",)  # Allow form submissions only to the same origin
CSP_OBJECT_SRC = ("'none'",)  # Disallow object, embed, and applet elements
CSP_SANDBOX = ("allow-forms", "allow-scripts")  # Restrict features (like form submission and script execution)

# You can also use these settings if you want to allow specific sources or external resources:
# CSP_FRAME_ANCESTORS = ("'none'",)
# CSP_MANIFEST_SRC = ("'self'",)

ROOT_URLCONF = 'chatgpt_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatgpt_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
    ('es', _('Spanish')),  # Add other languages as needed
]

#LANGUAGE_CODE = 'en-us'  # Default language
LANGUAGE_CODE = 'fr'  # Default language

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Set the directory for translation files
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'staticfiles'  # Folder where static files will be collected

STATICFILES_DIRS = [
    "static",
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
